#ifndef OPCODE_KCATS_H
#define OPCODE_KCATS_H

typedef enum opcode {

    NO_OP,
    LOAD_A,
    LOAD_A_IM,
    LOAD_A_X,
    LOAD_A_Y,
    LOAD_A_Z,
    LOAD_A_R0,
    LOAD_A_R1,
    LOAD_A_R2,
    LOAD_A_R3,
    STORE_A,
    STORE_A_IM,
    STORE_A_X,
    STORE_A_Y,
    STORE_A_Z,
    STORE_A_R0,
    STORE_A_R1,
    STORE_A_R2,
    STORE_A_R3,
    LOAD_X,
    LOAD_X_IM,
    LOAD_X_R0,
    LOAD_X_R1,
    LOAD_X_R2,
    LOAD_X_R3,
    LOAD_Y,
    LOAD_Y_IM,
    LOAD_Y_R0,
    LOAD_Y_R1,
    LOAD_Y_R2,
    LOAD_Y_R3,
    INC_X,
    INC_Y,
    INC_Z,
    DEC_X,
    DEC_Y,
    DEC_Z,
    ADD,
    ADD_IM,
    ADD_X,
    ADD_Y,
    ADD_Z,
    ADD_R0,
    ADD_R1,
    ADD_R2,
    ADD_R3,
    SUBTRACT,
    SUBTRACT_IM,
    SUBTRACT_X,
    SUBTRACT_Y,
    SUBTRACT_Z,
    SUBTRACT_R0,
    SUBTRACT_R1,
    SUBTRACT_R2,
    SUBTRACT_R3,
    SIGN_SHIFT_LEFT,
    SIGN_SHIFT_RIGHT,
    LOGICAL_SHIFT_LEFT,
    LOGICAL_SHIFT_RIGHT,
    ROTATE_LEFT,
    ROTATE_RIGHT,
    BIT_AND,
    BIT_AND_IM,
    BIT_AND_X,
    BIT_AND_Y,
    BIT_AND_Z,
    BIT_AND_R0,
    BIT_AND_R1,
    BIT_AND_R2,
    BIT_AND_R3,
    BIT_OR,
    BIT_OR_IM,
    BIT_OR_X,
    BIT_OR_Y,
    BIT_OR_Z,
    BIT_OR_R0,
    BIT_OR_R1,
    BIT_OR_R2,
    BIT_OR_R3,
    BIT_XOR,
    BIT_XOR_IM,
    BIT_XOR_X,
    BIT_XOR_Y,
    BIT_XOR_Z,
    BIT_XOR_R0,
    BIT_XOR_R1,
    BIT_XOR_R2,
    BIT_XOR_R3,
    SET_CARRY,
    SET_NEG,
    CLEAR_CARRY,
    CLEAR_OVERFLOW,
    CLEAR_NEG,
    BRANCH_PLUS,
    BRANCH_PLUS_IM,
    BRANCH_PLUS_XY,
    BRANCH_PLUS_R0R1,
    BRANCH_PLUS_R2R3,
    BRANCH_MINUS,
    BRANCH_MINUS_IM,
    BRANCH_MINUS_XY,
    BRANCH_MINUS_R0R1,
    BRANCH_MINUS_R2R3,
    BRANCH_OVERFLOW_SET,
    BRANCH_OVERFLOW_SET_IM,
    BRANCH_OVERFLOW_SET_XY,
    BRANCH_OVERFLOW_SET_R0R1,
    BRANCH_OVERFLOW_SET_R2R3,
    BRANCH_OVERFLOW_CLEAR,
    BRANCH_OVERFLOW_CLEAR_IM,
    BRANCH_OVERFLOW_CLEAR_XY,
    BRANCH_OVERFLOW_CLEAR_R0R1,
    BRANCH_OVERFLOW_CLEAR_R2R3,
    BRANCH_CARRY_SET,
    BRANCH_CARRY_SET_IM,
    BRANCH_CARRY_SET_XY,
    BRANCH_CARRY_SET_R0R1,
    BRANCH_CARRY_SET_R2R3,
    BRANCH_CARRY_CLEAR,
    BRANCH_CARRY_CLEAR_IM,
    BRANCH_CARRY_CLEAR_XY,
    BRANCH_CARRY_CLEAR_R0R1,
    BRANCH_CARRY_CLEAR_R2R3,
    BRANCH_EQUAL,
    BRANCH_EQUAL_IM,
    BRANCH_EQUAL_XY,
    BRANCH_EQUAL_R0R1,
    BRANCH_EQUAL_R2R3,
    BRANCH_NOT_EQUAL,
    BRANCH_NOT_EQUAL_IM,
    BRANCH_NOT_EQUAL_XY,
    BRANCH_NOT_EQUAL_R0R1,
    BRANCH_NOT_EQUAL_R2R3,
    JUMP,
    JUMP_IM,
    JUMP_XY,
    JUMP_R0R1,
    JUMP_R2R3,
    JUMP_SUBROUTINE,
    JUMP_SUBROUTINE_IM,
    // JUMP_SUBROUTINE_XY,
    // JUMP_SUBROUTINE_R0R1,
    // JUMP_SUBROUTINE_R2R3,
    PRINT_SIGNED,
    PRINT_SIGNED_IM,
    PRINT_SIGNED_X,
    PRINT_SIGNED_Y,
    PRINT_SIGNED_Z,
    PRINT_SIGNED_R0,
    PRINT_SIGNED_R1,
    PRINT_SIGNED_R2,
    PRINT_SIGNED_R3,
    PRINT_UNSIGNED,
    PRINT_UNSIGNED_IM,
    PRINT_UNSIGNED_X,
    PRINT_UNSIGNED_Y,
    PRINT_UNSIGNED_Z,
    PRINT_UNSIGNED_R0,
    PRINT_UNSIGNED_R1,
    PRINT_UNSIGNED_R2,
    PRINT_UNSIGNED_R3,
    PRINT_ASCII,
    PRINT_ASCII_IM,
    PRINT_ASCII_X,
    PRINT_ASCII_Y,
    PRINT_ASCII_Z,
    PRINT_ASCII_R0,
    PRINT_ASCII_R1,
    PRINT_ASCII_R2,
    PRINT_ASCII_R3,
    INPUT_NUMBER,
    INPUT_ASCII,


    HALT = 255

} Opcode;

#endif